<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>soracom &#8211; JunkHack Feed</title>
	<link>/</link>
	<description>アリエクでポチった JUNKHACK</description>
	<lastBuildDate>Sun, 29 May 2016 09:06:46 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2020/09/logo.png</url>
	<title>soracom &#8211; JunkHack</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Soracom で IoT はじめました</title>
		<link>/2016/05/29/iot1/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 29 May 2016 09:06:46 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<category><![CDATA[soracom]]></category>
		<guid isPermaLink="false">/?p=2196</guid>
							<description><![CDATA[移動している中、IoT データを送信したいなと。この場合、WIFI がないんですよね。 IoT デバイスからはブルートゥースやWiFi でネット経由へデータは出せるのですが、どこでも、投げたいので Soracom Air [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<p>移動している中、IoT データを送信したいなと。この場合、WIFI がないんですよね。</p>
<p>IoT デバイスからはブルートゥースやWiFi でネット経由へデータは出せるのですが、どこでも、投げたいので Soracom Air の SIM を使い始めました。</p>
<p>&#160;</p>
<p><a href="https://soracom.jp/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" decoding="async" title="soracom_air" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom_air" src="/wp-content/uploads/2016/05/soracom_air.png" width="332" height="107" /></a> </p>
<p>電波が届く範囲なら、どこでも、データを投げて記録が取れるということで、まずは格安の Linux ボードで Soracom に接続し単純なデータを送信するところまでやってみました。</p>
<p>今回の目標は、「Soracom 経由で、Linux の CPU&#160; 温度を ThingSpeak に送信しグラフ化させる」のが目標です。</p>
<p>ThingSpeak とは、IoT データを記録し、グラフ表示するWEBサービスです。このサービスは、<a href="https://github.com/iobridge/ThingSpeak" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">自前でも構築可能<span class="wpel-icon wpel-image wpel-icon-1"></span></a>ですので最終的にはデータ蓄積するサーバを構築しても良さそうです。</p>
<p>これが実現できると、以下のようなグラフがリアルタイムで記録されます。</p>
<p><img loading="lazy" decoding="async" title="test_-_ThingSpeak" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="test_-_ThingSpeak" src="/wp-content/uploads/2016/05/test__thingspeak.png" width="475" height="325" /></p>
<p>これを実現するためには、以下のような準備が必要です。</p>
<p>&#160;</p>
<p>・Linux ボードの準備と、その OS の選定</p>
<p>・soracom sim の準備と Linux 側から PPP 接続するための USB モデムの設定</p>
<p>・CPU 温度を取得して thingspeak にデータを投げるスクリプト</p>
<p>・thingspeak 側のアカウントなどの準備</p>
<p>最終的には、自立して稼動させたいので電源周りをどうしようか課題は残ります。</p>
<p>・独立した電源まわりの準備</p>
<p>・電源に充電させる仕組</p>
<p>&#160;</p>
<p>今回 Soracom 経由でインターネットに接続に利用する母艦の Linux ボードは、Orange Pi PC です。ラズベリーパイは、価格は5000円前後しますので屋外でぶっ壊れたときにショックなので、コストパフォーマンスが良い Orange Pi でやることに。</p>
<p>&#160;</p>
<p><a href="http://www.orangepi.org/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Orange Pi<span class="wpel-icon wpel-image wpel-icon-1"></span></a> シリーズは、過去にも紹介していますが、種類が結構あります。最近発売された WiFi が付いてさらに格安の <a href="http://www.cnx-software.com/2016/05/09/orange-pi-lite-development-board-with-wifi-is-now-available-for-12/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Orange Pi Lite<span class="wpel-icon wpel-image wpel-icon-1"></span></a> というものもあります。こちらは約1700円程度で購入できます。人柱的に、このボードも入手中ですので、到着したら改めてレポートしてみたいと思います。</p>
<p>&#160;</p>
<p>さて、soracom と 3G 通信するためにモデムが必要ですが、LGエレクトロニクス・ジャパン製で、OEM では DoCoMo から出ている L-05A を使いました。amazon で中古でゲットしました。osx でも使えるというのがぽちったポイントでした。</p>
<p><img loading="lazy" decoding="async" title="IMG_2782" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="IMG_2782" src="/wp-content/uploads/2016/05/img_2782.jpg" width="640" height="480" /> </p>
</p>
<p>最終的には、もう少しコンパクトにして電池を組み込む予定です。応用すれば GPS モジュールを接続して、位置を補足する IoT デバイスも作れそうです。</p>
<p>&#160;</p>
<p>soracom の管理コンソールからは、データ転送量も見えて管理しやすそうです。</p>
<p><img loading="lazy" decoding="async" title="SORACOM_ユーザーコンソール" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="SORACOM_ユーザーコンソール" src="/wp-content/uploads/2016/05/soracom_.png" width="490" height="480" /></p>
<p>では、順にポイントと勘所をご紹介します。</p>
<p>&#160;</p>
<h3>Linux ボードの準備と、その OS の選定</h3>
<p>&#160;</p>
<p>まず、母艦の準備です。Orange PI PC を用意しました。</p>
<p><a title="http://www.orangepi.org/orangepipc/" href="http://www.orangepi.org/orangepipc/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">http://www.orangepi.org/orangepipc/<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>オフィシャルサイトから、メーカー直販の aliexpress の販売サイトにいけます。メモリ512M でも要求は満たしますので、one とか lite でもよいかと思います。</p>
<p><img loading="lazy" decoding="async" title="orangepipc" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="orangepipc" src="/wp-content/uploads/2016/05/orangepipc.png" width="530" height="339" /> </p>
<p>OS は、ARMBIAN というものを今回は採用。Debian 系の OS となります。</p>
<p><a title="http://www.armbian.com/orange-pi-pc/" href="http://www.armbian.com/orange-pi-pc/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">http://www.armbian.com/orange-pi-pc/<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>8GB の SDCard に書き込みし、IP を固定しておきます。電源は、ラズベリーパイとは違い、マイクロUSBではありませんので、別途 4mm で、センターピンが 1.7mm のDC ジャックを用意しておきます。これは、PSP用USB充電ケーブルと同じなので、100円均一などでもゲットできるかと思います。自分は、ジャックを別途購入し電源ケーブルは自作です。</p>
<p>なお、今回はCPU ヒートシンクとファンを実装しました。設定によっては、ヒートシンクのみや、無しでも運用可能です。</p>
<p>設定によりますが、最高で100度近くまで CPU が発熱しますので寿命が短くなるか壊れる事もありますので注意が必要です。</p>
<p>&#160;</p>
<blockquote>
<p>過去にヒートシンクを付けた記事を書いていますのでご参考に。</p>
<p><a href="/2016/02/14/orangepi-one-%E3%81%ABfan-%E3%82%92%E4%BB%98%E3%81%91%E3%81%A6%E5%85%A8%E9%96%8B%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AF/" target="_blank" rel="noopener noreferrer" data-wpel-link="internal">OrangePi One にFan を付けて全開ベンチマーク</a></p>
</blockquote>
<p>&#160;</p>
<h3>soracom sim の準備</h3>
<p>次は、soracom の sim を USB モデムで使うための準備です。USB モデムは、今回中古で L-05A を購入しておきました。</p>
<p>まずは、soracom の sim をアクティベートしておきます。管理コンソールよりログインし、sim の操作で可能です。</p>
<p><img loading="lazy" decoding="async" title="soracomlogin" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracomlogin" src="/wp-content/uploads/2016/05/soracomlogin.png" width="631" height="353" /> </p>
<p>&#160;</p>
<p>なかなか簡単操作です。すばらしい。速度クラスは、とりあえず s1.minimum にしておきました。</p>
</p>
</p>
<p><img loading="lazy" decoding="async" title="soracom2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom2" src="/wp-content/uploads/2016/05/soracom2.png" width="630" height="401" /> </p>
<p>データ通信量が 150MiB を超えたらメールしてくるようにしておきました。有効期限なども設定できるようですね。キャリアになった気分です。</p>
<p>&#160;</p>
<h3>Linux 側から PPP 接続するための USB モデムの設定</h3>
<p>次に、sim を USB モデムに差込、Linux 機に取り付けます。デフォルトでは、CD-ROMドライブとして認識されるようですが、これは AT コマンドで挙動を制御できるようです。/dev/sr0 を一度イジェクトしておきます。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">[root@opi 22:34:04 ~]# eject /dev/sr0
eject: unable to eject, last error: Invalid argument
[root@opi 22:34:12 ~]# ll /dev/ | grep ACM
crw-rw---- 1 root dialout 166,   0 May 26 22:34 ttyACM0
crw-rw---- 1 root dialout 166,   1 May 26 22:34 ttyACM1
crw-rw---- 1 root dialout 166,   2 May 26 22:34 ttyACM2
[root@opi 22:34:30 ~]# </pre>
<p>&#160; </p>
<p>そして、AT コマンドで CD-ROM ドライブとして認識しないよう設定しておきます。 </p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">[root@opi 22:34:49 ~]# screen /dev/ttyACM0
ATZ
OK
AT%USBMODEM=0
[0] MODEM DRIVER

OK
ATZ0
OK</pre>
<p>&#160; </p>
<p>あとは、ppp 接続するための設定をしておきます。wvdial パッケージを導入しておきます。</p>
<p>&#160;</p>
<p>[root@opi 15:57:33 log]# apt-get install wvdial</p>
<p>&#160;</p>
<p>設定です。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">----- /etc/wvdial.conf 
[Dialer Defaults]
Init1 = ATZ
Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2
Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;soracom.io&quot;
Dial Attempts = 3
Modem Type = Analog Modem
Dial Command = ATD
Stupid Mode = yes
Baud = 460800
New PPPD = yes
Modem = /dev/ttyACM0
ISDN = 0
Phone = *99***1#
APN = soracom.io
Username = sora
Password = sora
Carrier Check = no
Auto DNS = 1
Check Def Route = 1</pre>
<p>&#160;</p>
<p>systemctl で起動できるよう設定しておきます。システム起動時に起動する設定にはまだしていません。enable にするだけですが。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/systemd/system/wvdial.service
[Unit]
Description=wvdial service
Wants=network.target

[Service]
Type=simple
ExecStartPre=/sbin/route del default gw 192.168.1.1
ExecStopPost=/sbin/route add default gw 192.168.1.1
ExecStart=/usr/bin/wvdial
ExecStop=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target</pre>
<p>&#160;</p>
<p>以上で設定は終わり。接続の確認をしておきます。</p>
<p>&#160;</p>
<p>[root@opi 16:02:24 log]# systemctl start wvdial</p>
<p>&#160;</p>
<p>動作したかどうかは、status で見てみます。USB モデムの LED が緑から青色になっていると思います。</p>
<p>&#160;</p>
<p>[root@opi 16:03:29 log]# systemctl status wvdial</p>
<p>::</p>
<p>May 28 16:02:37 orangepipc pppd[19681]: local&#160; IP address 10.182.126.96<br />
  <br />May 28 16:02:37 orangepipc pppd[19681]: remote IP address 10.64.64.64 </p>
<p>May 28 16:02:37 orangepipc pppd[19681]: primary&#160;&#160; DNS address 100.127.0.53 </p>
<p>May 28 16:02:37 orangepipc pppd[19681]: secondary DNS address 100.127.1.53 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; local&#160; IP address 10.182.126.96 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; remote IP address 10.64.64.64 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; primary&#160;&#160; DNS address 100.127.0.53 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; secondary DNS address 100.127.1.53 </p>
<p>&#160;</p>
<p>プライベートなクラスAの IP が割り振られるようですね。ppp0 の状態を見ると以下のようです。</p>
<p>&#160;</p>
<p>[root@opi 16:07:38 log]# ifconfig ppp0<br />
  <br />ppp0&#160;&#160;&#160;&#160;&#160; Link encap:Point-to-Point Protocol&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; inet addr:10.182.126.96&#160; P-t-P:10.64.64.64&#160; Mask:255.255.255.255 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; UP POINTOPOINT RUNNING NOARP MULTICAST&#160; MTU:1500&#160; Metric:1 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; RX packets:83 errors:0 dropped:0 overruns:0 frame:0 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; TX packets:83 errors:0 dropped:0 overruns:0 carrier:0 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; collisions:0 txqueuelen:3 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; RX bytes:10339 (10.0 KiB)&#160; TX bytes:14232 (13.8 KiB) </p>
<p>[root@opi 16:07:43 log]# </p>
<p>&#160;</p>
<p>eth0 も繋がっていますが、ルーティング情報が以下のようになっていれば、ppp0 経由でインターネットに接続可能です。</p>
<p>&#160;</p>
<p>[root@opi 16:09:42 log]# route -n<br />
  <br />Kernel IP routing table </p>
<p>Destination&#160;&#160;&#160;&#160; Gateway&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Genmask&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Flags Metric Ref&#160;&#160;&#160; Use Iface </p>
<p>0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; U&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 ppp0 </p>
<p>10.64.64.64&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 255.255.255.255 UH&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 ppp0 </p>
<p>192.168.1.0&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 255.255.255.0&#160;&#160; U&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 eth0 </p>
<p>[root@opi 16:09:44 log]# </p>
<p>&#160;</p>
<p>google までトレースルートしてみましょう。</p>
<p>&#160;</p>
<p>[root@opi 16:11:03 log]# traceroute www.google.com<br />
  <br />traceroute to www.google.com (172.217.25.68), 30 hops max, 60 byte packets </p>
<p>1&#160; ec2-175-41-192-232.ap-northeast-1.compute.amazonaws.com (175.41.192.232)&#160; 97.266 ms&#160; 106.862 ms&#160; 106.923 ms </p>
<p>2&#160; 27.0.0.71 (27.0.0.71)&#160; 116.491 ms&#160; 136.763 ms&#160; 136.841 ms </p>
<p>3&#160; 52.95.30.79 (52.95.30.79)&#160; 146.299 ms 52.95.30.77 (52.95.30.77)&#160; 156.162 ms 52.95.30.83 (52.95.30.83)&#160; 166.192 ms </p>
<p>4&#160; 52.95.30.150 (52.95.30.150)&#160; 166.290 ms 52.95.30.144 (52.95.30.144)&#160; 166.450 ms 52.95.30.150 (52.95.30.150)&#160; 205.754 ms </p>
<p>5&#160; 52.95.216.117 (52.95.216.117)&#160; 185.674 ms&#160; 195.447 ms&#160; 205.659 ms </p>
<p>6&#160; 216.239.54.13 (216.239.54.13)&#160; 215.216 ms&#160; 79.420 ms&#160; 97.653 ms </p>
<p>7&#160; 108.170.233.79 (108.170.233.79)&#160; 117.188 ms&#160; 127.330 ms&#160; 146.963 ms </p>
<p>8&#160; nrt13s50-in-f4.1e100.net (172.217.25.68)&#160; 156.867 ms&#160; 187.089 ms&#160; 196.809 ms </p>
<p>[root@opi 16:11:26 log]# </p>
<p>&#160;</p>
<p>soracom のコンソールで 1 時間ごとの使用量を見ると、記録されているようです。</p>
<p><img loading="lazy" decoding="async" title="soracom1h" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom1h" src="/wp-content/uploads/2016/05/soracom1h.png" width="511" height="480" /> </p>
<p>&#160;</p>
<h3>CPU 温度を取得して thingspeak にデータを投げるスクリプト</h3>
<p>次は、cpu 温度を取得し、データを飛ばすプログラムを作ります。python で作りました。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">#!/usr/bin/python
# coding: utf-8

import requests
#from time import sleep
import time
api_key='your api key'

def sender():
  while True:
    f = open(&quot;/sys/class/thermal/thermal_zone0/temp&quot;,&quot;r&quot;)
    t = f.read()
    payload = {'api_key': api_key, 'field1': str(t)}
    f.close()
    print &quot;CPU Temp is:%s&quot;%t ,
    r = requests.get('http://52.7.53.111/update', params=payload)
    print &quot;Result: &quot;, r.text
    time.sleep(1.0)

def main():
    sender()

if __name__ == '__main__':
  main()</pre>
<p>&#160;</p>
<p>簡単にプログラムを補足します。</p>
<p>python のライブラリを以下のように入れておきます。</p>
<p>&#160;</p>
<p># apt-get install python-dev<br />
  <br /># apt-get install python-pip </p>
<p># pip install requests </p>
<p>&#160;</p>
<p>api_key には、書き込みのAPI Key を入れておきます。</p>
<p>&#160;</p>
<p><img loading="lazy" decoding="async" title="Channels_-_ThingSpeak" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="Channels_-_ThingSpeak" src="/wp-content/uploads/2016/05/channels__thingspeak.png" width="475" height="303" /> </p>
<p>データをhttps (SSL)経由の post で投げるとパケットが消費されるので、ここでは、get で投げています。</p>
<p>api.thingspeak.com を名前解決すると以下のように２つIPが出ますので、ここでは片方のIPを指定しています。相手側の事情でIP が変わることもあるかもしれません。</p>
<p>&#160;</p>
<p># dig api.thingspeak.com </p>
<p>:: </p>
<p>;; ANSWER SECTION:<br />
  <br />api.thingspeak.com.&#160;&#160;&#160; 60&#160;&#160;&#160; IN&#160;&#160;&#160; A&#160;&#160;&#160; 52.200.157.52 </p>
<p>api.thingspeak.com.&#160;&#160;&#160; 60&#160;&#160;&#160; IN&#160;&#160;&#160; A&#160;&#160;&#160; 52.7.53.111 </p>
<p>&#160;</p>
<p>プログラムを以下のように実行します。</p>
<p>&#160;</p>
<p>[root@opi 18:20:46 work]# python t.py</p>
<p>&#160;</p>
<p>実行すると、以下のようになります。</p>
<p>&#160;</p>
<p>[root@opi 18:20:46 work]# python t.py<br />
  <br />CPU Temp is:38 </p>
<p>Result:&#160; 401 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>&#160;</p>
<p>CPU の温度を上げるため、負荷を UnixBench でかけてみます。</p>
<p>&#160;</p>
<p>[root@opi 18:08:33 UnixBench]# ./Run -c 4</p>
<p>&#160;</p>
<p>グラフ表示は、こんな感じで出ています。</p>
<p><img loading="lazy" decoding="async" title="test_-_ThingSpeak 2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="test_-_ThingSpeak 2" src="/wp-content/uploads/2016/05/test__thingspeak2.png" width="478" height="325" /> </p>
<p>CPU 温度がこれで1秒ごとに記録されていきますが、600秒に一度くらいでいいので、修正し、ログオフ後もスクリプトが動作するよう以下のように nohup で実行しておきます。</p>
<p>&#160;</p>
<p>[root@opi 18:34:08 work]# nohup python t.py &amp;<br />
  <br />[1] 13673 </p>
<p>[root@opi 18:34:28 work]# nohup: ignoring input and appending output to ‘nohup.out’ </p>
<p>[root@opi 18:34:32 work]# ps axu | grep python<br />
  <br />:: </p>
<p>root&#160;&#160;&#160;&#160; 13673&#160; 4.1&#160; 0.8&#160; 13796&#160; 8428 pts/0&#160;&#160;&#160; S&#160;&#160;&#160; 18:34&#160;&#160; 0:00 python t.py </p>
<p>&#160;</p>
<p>なお、今のところ soracom の接続料金は 119 円のようです。</p>
<p><img loading="lazy" decoding="async" title="soracompay" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracompay" src="/wp-content/uploads/2016/05/soracompay.png" width="623" height="234" /> </p>
<p>&#160;</p>
<p>しばらく、CPU 温度を記録させてテストしてみることに。GPIO からセンサーを取り付ければ、外気温や湿度、明るさや、PM2.5 など記録したいものを投げれます。</p>
<p>ちなみに、1日経過後、課金は以下のようです。</p>
<p><img loading="lazy" decoding="async" title="soracom_2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom_2" src="/wp-content/uploads/2016/05/soracom_2.png" width="631" height="232" /> </p>
<p>この母艦を利用し、WiFi 経由で センサーデバイスを作るのが実用的かもしれません。組み合わはいろいろありますね。</p>
<p align="left">この続きはまたの機会に。</p>
<p align="center">&#160;</p>
<div align="center">
<table cellspacing="0" cellpadding="2" width="400" align="center" border="0">
<tbody>
<tr>
<td valign="top" width="200"><a href="http://s.click.aliexpress.com/e/YrvvZz7IQ" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img decoding="async" style="float:none;margin-left:auto;display:block;margin-right:auto;" src="http://g03.a.alicdn.com/kf/HTB1yKxVMFXXXXcyXpXXq6xXFXXX7/Latest-font-b-Raspberry-b-font-font-b-Pi-b-font-2-Model-B-B-Plus.jpg_220x220.jpg" /><span style="display:block;"><font color="#669966"></font></span></a> </td>
<td valign="top" width="200"><a href="http://s.click.aliexpress.com/e/RbuJaiaU7" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" decoding="async" src="http://g03.a.alicdn.com/kf/HTB11roEKXXXXXaEXXXXq6xXFXXX0/-2PCS-with-Tracking-Number-and-Free-shipping-font-b-ESP8266-b-font-serial-WIFI-Witty.jpg_220x220.jpg" width="269" height="221" /><span style="display:block;"><font color="#669966"></font></span></a></td>
</tr>
</tbody>
</table>
</div>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
