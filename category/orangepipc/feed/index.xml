<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>OrangePiPC &#8211; JunkHack Feed</title>
	<link>/</link>
	<description>アリエクでポチった JUNKHACK</description>
	<lastBuildDate>Sun, 12 Jun 2016 00:00:47 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>
	<item>
		<title>VNC 設定と osx10.11 の画面共有</title>
		<link>/2016/06/12/vnc-e8a8ade5ae9ae381a8-osx10-11-e381aee794bbe99da2e585b1e69c89/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 12 Jun 2016 00:00:47 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiLite]]></category>
		<category><![CDATA[OrangePiOne]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<category><![CDATA[osx]]></category>
		<category><![CDATA[Raspberry Pi]]></category>
		<guid isPermaLink="false">/?p=2251</guid>
							<description><![CDATA[いつも VNC の設定の仕方を忘れるので備忘録。 参考 Raspberry Piの設定【VNCサーバ（tightVNC）の設定】 ARMBIAN のデスクトップ版は、nodm で自動ログインするので、まずこれを中止。 - [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>いつも VNC の設定の仕方を忘れるので備忘録。</p>
<blockquote>
<p>参考</p>
<p><a href="http://yamaryu0508.hatenablog.com/entry/2014/08/16/202441" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Raspberry Piの設定【VNCサーバ（tightVNC）の設定】<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
</blockquote>
<p>ARMBIAN のデスクトップ版は、nodm で自動ログインするので、まずこれを中止。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/default/nodm
::
#NODM_ENABLED=true
NODM_ENABLED=false</pre>
<p>続いて、vnc のインストール</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># apt-get install tightvncserver</pre>
<p>設定</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/init.d/vncboot
### BEGIN INIT INFO
# Provides: vncboot
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start VNC Server at boot time
# Description: Start VNC Server at boot time.
### END INIT INFO

#! /bin/sh
# /etc/init.d/vncboot

USER=junkhack
HOME=/home/junkhack

export USER HOME

case &quot;$1&quot; in
 start)
 echo &quot;Starting VNC Server&quot;
 #Insert your favoured settings for a VNC session
 su $USER -c '/usr/bin/vncserver :1 -geometry 1440x900 -depth 24'
 ;;

 stop)
 echo &quot;Stopping VNC Server&quot;
 su $USER -c '/usr/bin/vncserver -kill :1'
 ;;

 *)
 echo &quot;Usage: /etc/init.d/vncboot {start|stop}&quot;
 exit 1
 ;;
esac

exit 0</pre>
<p>権限付与と、自動起動設定</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># chmod 755 /etc/init.d/vncboot
# update-rc.d vncboot defaults</pre>
<p>&#160;</p>
<p>リブートするか、起動スクリプトをたたく。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># /etc/init.d/vncboot start</pre>
<p>osx からの画面共有</p>
<p><img loading="lazy" title="osxvnc" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="osxvnc" src="/wp-content/uploads/2016/06/osxvnc.png" width="500" height="289" /> </p>
<p>&#160;</p>
<p><img loading="lazy" title="junkhack_s_X_desktop__orangepilite_1_" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="junkhack_s_X_desktop__orangepilite_1_" src="/wp-content/uploads/2016/06/junkhack_s_x_desktop__orangepilite_1_.png" width="829" height="785" /> </p>
<p>osx10.11 の画面共有は少し良くなった感じ。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>WiFi RTL8188CUS のメモ</title>
		<link>/2016/05/29/wifi-rtl8188cus-e381aee383a1e383a2/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 29 May 2016 14:56:25 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<category><![CDATA[WiFi]]></category>
		<guid isPermaLink="false">/?p=2203</guid>
							<description><![CDATA[WiFi アダプターのメモ書き。 Junk箱を整理していたら、WIFI USB が見つかったのでそれの認識させるメモ。 &#160; OS は ARMBIAN。 # uname -a Linux orangepipc 3 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>WiFi アダプターのメモ書き。</p>
<p>Junk箱を整理していたら、WIFI USB が見つかったのでそれの認識させるメモ。</p>
<p>&#160;</p>
<p>OS は ARMBIAN。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># uname -a
Linux orangepipc 3.4.112-sun8i #30 SMP PREEMPT Sat Apr 30 19:49:10 CEST 2016 armv7l GNU/Linux</pre>
<p>USB を差し込んで、lsusb をしたときの型番は以下</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># lsusb | grep RTL8188CUS
Bus 003 Device 002: ID 0bda:8176 Realtek Semiconductor Corp. RTL8188CUS 802.11n WLAN Adapter</pre>
<p>で、kernel モジュールは、以下があればいい</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># find /lib/modules -name 8192cu*
/lib/modules/3.4.112-sun8i/kernel/net/wireless/8192cu.ko</pre>
<p>こんな感じでロードさせておく</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/modules
#8189es
8192cu
gpio_sunxi
w1-sunxi
w1-gpio
#w1-therm
#gc2035</pre>
<p>省電力モードを切っておくとプチ切れに対応できる模様</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/modprobe.d/8192cu.conf 
options 8192cu rtw_power_mgnt=0 rtw_enusbss=0</pre>
<p>このあたりにパラメータが反映されている模様。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># cat /sys/module/8192cu/parameters/rtw_power_mgnt
0</pre>
<p>あとSSIDとPWのファイルを以下で作成</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">wpa_passphrase &quot;SSID&quot; &quot;PASSWORD&quot; &gt; /etc/wpa_supplicant/wpa_supplicant.conf</pre>
<p>IP固定にしておく場合、</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/network/interfaces
::
auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
address 192.168.1.5
netmask 255.255.255.0
gateway 192.168.1.1
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf</pre>
<p>接続の状態確認、SSID のスキャンは以下</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># iwlist wlan0 scan
wlan0     Scan completed :
          Cell 01 - Address: 90:84:0D:**:**:**
                    ESSID:&quot;JunkHackAP&quot;
                    Protocol:IEEE 802.11bgn
                    Mode:Master
                    Frequency:2.437 GHz (Channel 6)
                    Encryption key:on
                    Bit Rates:144 Mb/s
                    Extra:wpa_ie=*************
                    IE: WPA Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (1) : TKIP
                        Authentication Suites (1) : PSK
                    Extra:rsn_ie=*************
                    IE: IEEE 802.11i/WPA2 Version 1
                        Group Cipher : TKIP
                        Pairwise Ciphers (2) : CCMP TKIP
                        Authentication Suites (1) : PSK
                    Quality=89/100  Signal level=8/100 </pre>
<p>他ホストからping </p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">$ ping -c 10 192.168.1.5
PING 192.168.1.5 (192.168.1.5): 56 data bytes
64 bytes from 192.168.1.5: icmp_seq=0 ttl=64 time=131.314 ms
64 bytes from 192.168.1.5: icmp_seq=1 ttl=64 time=150.921 ms
64 bytes from 192.168.1.5: icmp_seq=2 ttl=64 time=174.333 ms
64 bytes from 192.168.1.5: icmp_seq=3 ttl=64 time=201.884 ms
64 bytes from 192.168.1.5: icmp_seq=4 ttl=64 time=122.028 ms
64 bytes from 192.168.1.5: icmp_seq=5 ttl=64 time=141.495 ms
64 bytes from 192.168.1.5: icmp_seq=6 ttl=64 time=169.318 ms
64 bytes from 192.168.1.5: icmp_seq=7 ttl=64 time=187.959 ms
64 bytes from 192.168.1.5: icmp_seq=8 ttl=64 time=112.811 ms
64 bytes from 192.168.1.5: icmp_seq=9 ttl=64 time=131.375 ms

--- 192.168.1.5 ping statistics ---
10 packets transmitted, 10 packets received, 0.0% packet loss
round-trip min/avg/max/stddev = 112.811/152.344/201.884/28.245 ms</pre>
<p>イーサネットより100ms は遅いです。アクセスポイントに設定するのはまた今度。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Soracom で IoT はじめました</title>
		<link>/2016/05/29/iot1/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 29 May 2016 09:06:46 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<category><![CDATA[soracom]]></category>
		<guid isPermaLink="false">/?p=2196</guid>
							<description><![CDATA[移動している中、IoT データを送信したいなと。この場合、WIFI がないんですよね。 IoT デバイスからはブルートゥースやWiFi でネット経由へデータは出せるのですが、どこでも、投げたいので Soracom Air [&#8230;]]]></description>
										<content:encoded><![CDATA[</p>
<p>移動している中、IoT データを送信したいなと。この場合、WIFI がないんですよね。</p>
<p>IoT デバイスからはブルートゥースやWiFi でネット経由へデータは出せるのですが、どこでも、投げたいので Soracom Air の SIM を使い始めました。</p>
<p>&#160;</p>
<p><a href="https://soracom.jp/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" title="soracom_air" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom_air" src="/wp-content/uploads/2016/05/soracom_air.png" width="332" height="107" /></a> </p>
<p>電波が届く範囲なら、どこでも、データを投げて記録が取れるということで、まずは格安の Linux ボードで Soracom に接続し単純なデータを送信するところまでやってみました。</p>
<p>今回の目標は、「Soracom 経由で、Linux の CPU&#160; 温度を ThingSpeak に送信しグラフ化させる」のが目標です。</p>
<p>ThingSpeak とは、IoT データを記録し、グラフ表示するWEBサービスです。このサービスは、<a href="https://github.com/iobridge/ThingSpeak" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">自前でも構築可能<span class="wpel-icon wpel-image wpel-icon-1"></span></a>ですので最終的にはデータ蓄積するサーバを構築しても良さそうです。</p>
<p>これが実現できると、以下のようなグラフがリアルタイムで記録されます。</p>
<p><img loading="lazy" title="test_-_ThingSpeak" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="test_-_ThingSpeak" src="/wp-content/uploads/2016/05/test__thingspeak.png" width="475" height="325" /></p>
<p>これを実現するためには、以下のような準備が必要です。</p>
<p>&#160;</p>
<p>・Linux ボードの準備と、その OS の選定</p>
<p>・soracom sim の準備と Linux 側から PPP 接続するための USB モデムの設定</p>
<p>・CPU 温度を取得して thingspeak にデータを投げるスクリプト</p>
<p>・thingspeak 側のアカウントなどの準備</p>
<p>最終的には、自立して稼動させたいので電源周りをどうしようか課題は残ります。</p>
<p>・独立した電源まわりの準備</p>
<p>・電源に充電させる仕組</p>
<p>&#160;</p>
<p>今回 Soracom 経由でインターネットに接続に利用する母艦の Linux ボードは、Orange Pi PC です。ラズベリーパイは、価格は5000円前後しますので屋外でぶっ壊れたときにショックなので、コストパフォーマンスが良い Orange Pi でやることに。</p>
<p>&#160;</p>
<p><a href="http://www.orangepi.org/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Orange Pi<span class="wpel-icon wpel-image wpel-icon-1"></span></a> シリーズは、過去にも紹介していますが、種類が結構あります。最近発売された WiFi が付いてさらに格安の <a href="http://www.cnx-software.com/2016/05/09/orange-pi-lite-development-board-with-wifi-is-now-available-for-12/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Orange Pi Lite<span class="wpel-icon wpel-image wpel-icon-1"></span></a> というものもあります。こちらは約1700円程度で購入できます。人柱的に、このボードも入手中ですので、到着したら改めてレポートしてみたいと思います。</p>
<p>&#160;</p>
<p>さて、soracom と 3G 通信するためにモデムが必要ですが、LGエレクトロニクス・ジャパン製で、OEM では DoCoMo から出ている L-05A を使いました。amazon で中古でゲットしました。osx でも使えるというのがぽちったポイントでした。</p>
<p><img loading="lazy" title="IMG_2782" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="IMG_2782" src="/wp-content/uploads/2016/05/img_2782.jpg" width="640" height="480" /> </p>
</p>
<p>最終的には、もう少しコンパクトにして電池を組み込む予定です。応用すれば GPS モジュールを接続して、位置を補足する IoT デバイスも作れそうです。</p>
<p>&#160;</p>
<p>soracom の管理コンソールからは、データ転送量も見えて管理しやすそうです。</p>
<p><img loading="lazy" title="SORACOM_ユーザーコンソール" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="SORACOM_ユーザーコンソール" src="/wp-content/uploads/2016/05/soracom_.png" width="490" height="480" /></p>
<p>では、順にポイントと勘所をご紹介します。</p>
<p>&#160;</p>
<h3>Linux ボードの準備と、その OS の選定</h3>
<p>&#160;</p>
<p>まず、母艦の準備です。Orange PI PC を用意しました。</p>
<p><a title="http://www.orangepi.org/orangepipc/" href="http://www.orangepi.org/orangepipc/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">http://www.orangepi.org/orangepipc/<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>オフィシャルサイトから、メーカー直販の aliexpress の販売サイトにいけます。メモリ512M でも要求は満たしますので、one とか lite でもよいかと思います。</p>
<p><img loading="lazy" title="orangepipc" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="orangepipc" src="/wp-content/uploads/2016/05/orangepipc.png" width="530" height="339" /> </p>
<p>OS は、ARMBIAN というものを今回は採用。Debian 系の OS となります。</p>
<p><a title="http://www.armbian.com/orange-pi-pc/" href="http://www.armbian.com/orange-pi-pc/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">http://www.armbian.com/orange-pi-pc/<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>8GB の SDCard に書き込みし、IP を固定しておきます。電源は、ラズベリーパイとは違い、マイクロUSBではありませんので、別途 4mm で、センターピンが 1.7mm のDC ジャックを用意しておきます。これは、PSP用USB充電ケーブルと同じなので、100円均一などでもゲットできるかと思います。自分は、ジャックを別途購入し電源ケーブルは自作です。</p>
<p>なお、今回はCPU ヒートシンクとファンを実装しました。設定によっては、ヒートシンクのみや、無しでも運用可能です。</p>
<p>設定によりますが、最高で100度近くまで CPU が発熱しますので寿命が短くなるか壊れる事もありますので注意が必要です。</p>
<p>&#160;</p>
<blockquote>
<p>過去にヒートシンクを付けた記事を書いていますのでご参考に。</p>
<p><a href="/2016/02/14/orangepi-one-%E3%81%ABfan-%E3%82%92%E4%BB%98%E3%81%91%E3%81%A6%E5%85%A8%E9%96%8B%E3%83%99%E3%83%B3%E3%83%81%E3%83%9E%E3%83%BC%E3%82%AF/" target="_blank" rel="noopener noreferrer" data-wpel-link="internal">OrangePi One にFan を付けて全開ベンチマーク</a></p>
</blockquote>
<p>&#160;</p>
<h3>soracom sim の準備</h3>
<p>次は、soracom の sim を USB モデムで使うための準備です。USB モデムは、今回中古で L-05A を購入しておきました。</p>
<p>まずは、soracom の sim をアクティベートしておきます。管理コンソールよりログインし、sim の操作で可能です。</p>
<p><img loading="lazy" title="soracomlogin" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracomlogin" src="/wp-content/uploads/2016/05/soracomlogin.png" width="631" height="353" /> </p>
<p>&#160;</p>
<p>なかなか簡単操作です。すばらしい。速度クラスは、とりあえず s1.minimum にしておきました。</p>
</p>
</p>
<p><img loading="lazy" title="soracom2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom2" src="/wp-content/uploads/2016/05/soracom2.png" width="630" height="401" /> </p>
<p>データ通信量が 150MiB を超えたらメールしてくるようにしておきました。有効期限なども設定できるようですね。キャリアになった気分です。</p>
<p>&#160;</p>
<h3>Linux 側から PPP 接続するための USB モデムの設定</h3>
<p>次に、sim を USB モデムに差込、Linux 機に取り付けます。デフォルトでは、CD-ROMドライブとして認識されるようですが、これは AT コマンドで挙動を制御できるようです。/dev/sr0 を一度イジェクトしておきます。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">[root@opi 22:34:04 ~]# eject /dev/sr0
eject: unable to eject, last error: Invalid argument
[root@opi 22:34:12 ~]# ll /dev/ | grep ACM
crw-rw---- 1 root dialout 166,   0 May 26 22:34 ttyACM0
crw-rw---- 1 root dialout 166,   1 May 26 22:34 ttyACM1
crw-rw---- 1 root dialout 166,   2 May 26 22:34 ttyACM2
[root@opi 22:34:30 ~]# </pre>
<p>&#160; </p>
<p>そして、AT コマンドで CD-ROM ドライブとして認識しないよう設定しておきます。 </p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">[root@opi 22:34:49 ~]# screen /dev/ttyACM0
ATZ
OK
AT%USBMODEM=0
[0] MODEM DRIVER

OK
ATZ0
OK</pre>
<p>&#160; </p>
<p>あとは、ppp 接続するための設定をしておきます。wvdial パッケージを導入しておきます。</p>
<p>&#160;</p>
<p>[root@opi 15:57:33 log]# apt-get install wvdial</p>
<p>&#160;</p>
<p>設定です。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">----- /etc/wvdial.conf 
[Dialer Defaults]
Init1 = ATZ
Init2 = ATQ0 V1 E1 S0=0 &amp;C1 &amp;D2
Init3 = AT+CGDCONT=1,&quot;IP&quot;,&quot;soracom.io&quot;
Dial Attempts = 3
Modem Type = Analog Modem
Dial Command = ATD
Stupid Mode = yes
Baud = 460800
New PPPD = yes
Modem = /dev/ttyACM0
ISDN = 0
Phone = *99***1#
APN = soracom.io
Username = sora
Password = sora
Carrier Check = no
Auto DNS = 1
Check Def Route = 1</pre>
<p>&#160;</p>
<p>systemctl で起動できるよう設定しておきます。システム起動時に起動する設定にはまだしていません。enable にするだけですが。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">---- /etc/systemd/system/wvdial.service
[Unit]
Description=wvdial service
Wants=network.target

[Service]
Type=simple
ExecStartPre=/sbin/route del default gw 192.168.1.1
ExecStopPost=/sbin/route add default gw 192.168.1.1
ExecStart=/usr/bin/wvdial
ExecStop=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target</pre>
<p>&#160;</p>
<p>以上で設定は終わり。接続の確認をしておきます。</p>
<p>&#160;</p>
<p>[root@opi 16:02:24 log]# systemctl start wvdial</p>
<p>&#160;</p>
<p>動作したかどうかは、status で見てみます。USB モデムの LED が緑から青色になっていると思います。</p>
<p>&#160;</p>
<p>[root@opi 16:03:29 log]# systemctl status wvdial</p>
<p>::</p>
<p>May 28 16:02:37 orangepipc pppd[19681]: local&#160; IP address 10.182.126.96<br />
  <br />May 28 16:02:37 orangepipc pppd[19681]: remote IP address 10.64.64.64 </p>
<p>May 28 16:02:37 orangepipc pppd[19681]: primary&#160;&#160; DNS address 100.127.0.53 </p>
<p>May 28 16:02:37 orangepipc pppd[19681]: secondary DNS address 100.127.1.53 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; local&#160; IP address 10.182.126.96 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; remote IP address 10.64.64.64 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; primary&#160;&#160; DNS address 100.127.0.53 </p>
<p>May 28 16:02:37 orangepipc wvdial[19679]: &#8211;&gt; secondary DNS address 100.127.1.53 </p>
<p>&#160;</p>
<p>プライベートなクラスAの IP が割り振られるようですね。ppp0 の状態を見ると以下のようです。</p>
<p>&#160;</p>
<p>[root@opi 16:07:38 log]# ifconfig ppp0<br />
  <br />ppp0&#160;&#160;&#160;&#160;&#160; Link encap:Point-to-Point Protocol&#160; <br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; inet addr:10.182.126.96&#160; P-t-P:10.64.64.64&#160; Mask:255.255.255.255 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; UP POINTOPOINT RUNNING NOARP MULTICAST&#160; MTU:1500&#160; Metric:1 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; RX packets:83 errors:0 dropped:0 overruns:0 frame:0 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; TX packets:83 errors:0 dropped:0 overruns:0 carrier:0 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; collisions:0 txqueuelen:3 </p>
<p>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; RX bytes:10339 (10.0 KiB)&#160; TX bytes:14232 (13.8 KiB) </p>
<p>[root@opi 16:07:43 log]# </p>
<p>&#160;</p>
<p>eth0 も繋がっていますが、ルーティング情報が以下のようになっていれば、ppp0 経由でインターネットに接続可能です。</p>
<p>&#160;</p>
<p>[root@opi 16:09:42 log]# route -n<br />
  <br />Kernel IP routing table </p>
<p>Destination&#160;&#160;&#160;&#160; Gateway&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Genmask&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Flags Metric Ref&#160;&#160;&#160; Use Iface </p>
<p>0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; U&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 ppp0 </p>
<p>10.64.64.64&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 255.255.255.255 UH&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 ppp0 </p>
<p>192.168.1.0&#160;&#160;&#160;&#160; 0.0.0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; 255.255.255.0&#160;&#160; U&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160; 0&#160;&#160;&#160;&#160;&#160;&#160;&#160; 0 eth0 </p>
<p>[root@opi 16:09:44 log]# </p>
<p>&#160;</p>
<p>google までトレースルートしてみましょう。</p>
<p>&#160;</p>
<p>[root@opi 16:11:03 log]# traceroute www.google.com<br />
  <br />traceroute to www.google.com (172.217.25.68), 30 hops max, 60 byte packets </p>
<p>1&#160; ec2-175-41-192-232.ap-northeast-1.compute.amazonaws.com (175.41.192.232)&#160; 97.266 ms&#160; 106.862 ms&#160; 106.923 ms </p>
<p>2&#160; 27.0.0.71 (27.0.0.71)&#160; 116.491 ms&#160; 136.763 ms&#160; 136.841 ms </p>
<p>3&#160; 52.95.30.79 (52.95.30.79)&#160; 146.299 ms 52.95.30.77 (52.95.30.77)&#160; 156.162 ms 52.95.30.83 (52.95.30.83)&#160; 166.192 ms </p>
<p>4&#160; 52.95.30.150 (52.95.30.150)&#160; 166.290 ms 52.95.30.144 (52.95.30.144)&#160; 166.450 ms 52.95.30.150 (52.95.30.150)&#160; 205.754 ms </p>
<p>5&#160; 52.95.216.117 (52.95.216.117)&#160; 185.674 ms&#160; 195.447 ms&#160; 205.659 ms </p>
<p>6&#160; 216.239.54.13 (216.239.54.13)&#160; 215.216 ms&#160; 79.420 ms&#160; 97.653 ms </p>
<p>7&#160; 108.170.233.79 (108.170.233.79)&#160; 117.188 ms&#160; 127.330 ms&#160; 146.963 ms </p>
<p>8&#160; nrt13s50-in-f4.1e100.net (172.217.25.68)&#160; 156.867 ms&#160; 187.089 ms&#160; 196.809 ms </p>
<p>[root@opi 16:11:26 log]# </p>
<p>&#160;</p>
<p>soracom のコンソールで 1 時間ごとの使用量を見ると、記録されているようです。</p>
<p><img loading="lazy" title="soracom1h" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom1h" src="/wp-content/uploads/2016/05/soracom1h.png" width="511" height="480" /> </p>
<p>&#160;</p>
<h3>CPU 温度を取得して thingspeak にデータを投げるスクリプト</h3>
<p>次は、cpu 温度を取得し、データを飛ばすプログラムを作ります。python で作りました。</p>
<p>&#160;</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">#!/usr/bin/python
# coding: utf-8

import requests
#from time import sleep
import time
api_key='your api key'

def sender():
  while True:
    f = open(&quot;/sys/class/thermal/thermal_zone0/temp&quot;,&quot;r&quot;)
    t = f.read()
    payload = {'api_key': api_key, 'field1': str(t)}
    f.close()
    print &quot;CPU Temp is:%s&quot;%t ,
    r = requests.get('http://52.7.53.111/update', params=payload)
    print &quot;Result: &quot;, r.text
    time.sleep(1.0)

def main():
    sender()

if __name__ == '__main__':
  main()</pre>
<p>&#160;</p>
<p>簡単にプログラムを補足します。</p>
<p>python のライブラリを以下のように入れておきます。</p>
<p>&#160;</p>
<p># apt-get install python-dev<br />
  <br /># apt-get install python-pip </p>
<p># pip install requests </p>
<p>&#160;</p>
<p>api_key には、書き込みのAPI Key を入れておきます。</p>
<p>&#160;</p>
<p><img loading="lazy" title="Channels_-_ThingSpeak" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="Channels_-_ThingSpeak" src="/wp-content/uploads/2016/05/channels__thingspeak.png" width="475" height="303" /> </p>
<p>データをhttps (SSL)経由の post で投げるとパケットが消費されるので、ここでは、get で投げています。</p>
<p>api.thingspeak.com を名前解決すると以下のように２つIPが出ますので、ここでは片方のIPを指定しています。相手側の事情でIP が変わることもあるかもしれません。</p>
<p>&#160;</p>
<p># dig api.thingspeak.com </p>
<p>:: </p>
<p>;; ANSWER SECTION:<br />
  <br />api.thingspeak.com.&#160;&#160;&#160; 60&#160;&#160;&#160; IN&#160;&#160;&#160; A&#160;&#160;&#160; 52.200.157.52 </p>
<p>api.thingspeak.com.&#160;&#160;&#160; 60&#160;&#160;&#160; IN&#160;&#160;&#160; A&#160;&#160;&#160; 52.7.53.111 </p>
<p>&#160;</p>
<p>プログラムを以下のように実行します。</p>
<p>&#160;</p>
<p>[root@opi 18:20:46 work]# python t.py</p>
<p>&#160;</p>
<p>実行すると、以下のようになります。</p>
<p>&#160;</p>
<p>[root@opi 18:20:46 work]# python t.py<br />
  <br />CPU Temp is:38 </p>
<p>Result:&#160; 401 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>CPU Temp is:38 </p>
<p>Result:&#160; 0 </p>
<p>&#160;</p>
<p>CPU の温度を上げるため、負荷を UnixBench でかけてみます。</p>
<p>&#160;</p>
<p>[root@opi 18:08:33 UnixBench]# ./Run -c 4</p>
<p>&#160;</p>
<p>グラフ表示は、こんな感じで出ています。</p>
<p><img loading="lazy" title="test_-_ThingSpeak 2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="test_-_ThingSpeak 2" src="/wp-content/uploads/2016/05/test__thingspeak2.png" width="478" height="325" /> </p>
<p>CPU 温度がこれで1秒ごとに記録されていきますが、600秒に一度くらいでいいので、修正し、ログオフ後もスクリプトが動作するよう以下のように nohup で実行しておきます。</p>
<p>&#160;</p>
<p>[root@opi 18:34:08 work]# nohup python t.py &amp;<br />
  <br />[1] 13673 </p>
<p>[root@opi 18:34:28 work]# nohup: ignoring input and appending output to ‘nohup.out’ </p>
<p>[root@opi 18:34:32 work]# ps axu | grep python<br />
  <br />:: </p>
<p>root&#160;&#160;&#160;&#160; 13673&#160; 4.1&#160; 0.8&#160; 13796&#160; 8428 pts/0&#160;&#160;&#160; S&#160;&#160;&#160; 18:34&#160;&#160; 0:00 python t.py </p>
<p>&#160;</p>
<p>なお、今のところ soracom の接続料金は 119 円のようです。</p>
<p><img loading="lazy" title="soracompay" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracompay" src="/wp-content/uploads/2016/05/soracompay.png" width="623" height="234" /> </p>
<p>&#160;</p>
<p>しばらく、CPU 温度を記録させてテストしてみることに。GPIO からセンサーを取り付ければ、外気温や湿度、明るさや、PM2.5 など記録したいものを投げれます。</p>
<p>ちなみに、1日経過後、課金は以下のようです。</p>
<p><img loading="lazy" title="soracom_2" style="float:none;margin-left:auto;display:block;margin-right:auto;border-width:0;" border="0" alt="soracom_2" src="/wp-content/uploads/2016/05/soracom_2.png" width="631" height="232" /> </p>
<p>この母艦を利用し、WiFi 経由で センサーデバイスを作るのが実用的かもしれません。組み合わはいろいろありますね。</p>
<p align="left">この続きはまたの機会に。</p>
<p align="center">&#160;</p>
<div align="center">
<table cellspacing="0" cellpadding="2" width="400" align="center" border="0">
<tbody>
<tr>
<td valign="top" width="200"><a href="http://s.click.aliexpress.com/e/YrvvZz7IQ" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img style="float:none;margin-left:auto;display:block;margin-right:auto;" src="http://g03.a.alicdn.com/kf/HTB1yKxVMFXXXXcyXpXXq6xXFXXX7/Latest-font-b-Raspberry-b-font-font-b-Pi-b-font-2-Model-B-B-Plus.jpg_220x220.jpg" /><span style="display:block;"><font color="#669966"></font></span></a> </td>
<td valign="top" width="200"><a href="http://s.click.aliexpress.com/e/RbuJaiaU7" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" src="http://g03.a.alicdn.com/kf/HTB11roEKXXXXXaEXXXXq6xXFXXX0/-2PCS-with-Tracking-Number-and-Free-shipping-font-b-ESP8266-b-font-serial-WIFI-Witty.jpg_220x220.jpg" width="269" height="221" /><span style="display:block;"><font color="#669966"></font></span></a></td>
</tr>
</tbody>
</table>
</div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Orange Pi Lite が出ていました</title>
		<link>/2016/05/28/orange-pi-lite-e3818ce587bae381a6e38184e381bee38197e3819f/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sat, 28 May 2016 11:05:03 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiLite]]></category>
		<category><![CDATA[OrangePiOne]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<guid isPermaLink="false">/?p=2181</guid>
							<description><![CDATA[Orange Pi Lite なかなか出ないなぁと思ってましたが、今日WEBを散歩していたらなんと販売開始されているようです。 5/9 くらいから販売していたようです。 &#160; 基本的には、one の Lan が撤 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Orange Pi Lite なかなか出ないなぁと思ってましたが、今日WEBを散歩していたらなんと販売開始されているようです。</p>
<p>5/9 くらいから販売していたようです。</p>
<p>&#160;</p>
<p><a href="http://www.aliexpress.com/item/Orange-Pi-Lite-Support-ubuntu-linux-and-android-mini-PC-Beyond-and-Compatible-with-Raspberry/32662738571.html" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" title="New-Coming-Orange-Pi-Lite-With-Wifi-Antenna-Support-ubuntu-linux-and-android-mini-PC-Beyond" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="New-Coming-Orange-Pi-Lite-With-Wifi-Antenna-Support-ubuntu-linux-and-android-mini-PC-Beyond" src="/wp-content/uploads/2016/05/newcomingorangepilitewithwifiantennasupportubuntulinuxandandroidminipcbeyond.jpg" width="480" height="480" /></a> </p>
<p>基本的には、one の Lan が撤廃され、WiFi が内臓、 USB が１つから２つに増えた感じです。1700円弱でゲットできるので、サンプルに１つポチっておきました。これで、Orange Pi シリーズは3個になりました。</p>
<p>&#160;</p>
<p>あと、aliexpress のアフリエイトも初めてみました。</p>
<p>&#160;</p>
<p> <a href="http://s.click.aliexpress.com/e/ZzBYBMbQz" target="_parent" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" style="float:none;margin-left:auto;display:block;margin-right:auto;" src="http://g02.a.alicdn.com/kf/HTB1nalkKXXXXXatXpXXq6xXFXXXJ/2016-new-original-font-b-raspberry-b-font-pi-3-model-b-font-b-raspberry-b.jpg_220x220.jpg" width="307" height="367" /><span style="display:block;"><font color="#669966"></font></span></a> <a href="http://s.click.aliexpress.com/e/NJYFqZZjm?bz=300*250" target="_parent" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" style="float:none;margin-left:auto;display:block;margin-right:auto;" src="http://g01.a.alicdn.com/kf/HTB1lssRJXXXXXczXpXXq6xXFXXX8/en-300x250.jpg" width="300" height="250" /></a></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>ARMBIAN を Orange PI PC に入れてみた</title>
		<link>/2016/05/21/armbian-e38292-orange-pi-pc-e381abe585a5e3828ce381a6e381bfe3819f/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sat, 21 May 2016 10:57:21 +0000</pubDate>
				<category><![CDATA[OrangePi]]></category>
		<category><![CDATA[OrangePiPC]]></category>
		<guid isPermaLink="false">/?p=2178</guid>
							<description><![CDATA[前から気になっていた、ARMBIAN を Orange PI PC に入れてみました。 ８GBのSD に書き込みしてブート。今回は、デスクトップ版のを使ってみました。 ウィザードや、各種スクリプトが走るようで２，３回リブ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>前から気になっていた、ARMBIAN を Orange PI PC に入れてみました。</p>
<p> <a href="http://www.armbian.com/orange-pi-pc/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external"><img loading="lazy" title="Orange_Pi_PC_H3_–_armbian" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="Orange_Pi_PC_H3_–_armbian" src="/wp-content/uploads/2016/05/orange_pi_pc_h3__armbian.png" width="494" height="480" /></a>   </p>
<p>８GBのSD に書き込みしてブート。今回は、デスクトップ版のを使ってみました。</p>
<p>ウィザードや、各種スクリプトが走るようで２，３回リブートを繰り返し領域拡張などやっているようです。</p>
<p>少々、設定してあとはリモートから接続。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">  ___                               ____  _   ____   ____ 
 / _ \ _ __ __ _ _ __   __ _  ___  |  _ \(_) |  _ \ / ___|
| | | | '__/ _` | '_ \ / _` |/ _ \ | |_) | | | |_) | |    
| |_| | | | (_| | | | | (_| |  __/ |  __/| | |  __/| |___ 
 \___/|_|  \__,_|_| |_|\__, |\___| |_|   |_| |_|    \____|
                       |___/                              

Welcome to ARMBIAN Debian GNU/Linux 8 (jessie) 3.4.112-sun8i 

System load:   0.13                Up time:       5 hours        Local users:   4                
Memory usage:  35 % of 1000Mb     IP:            192.168.1.24
CPU temp:      42°C               
Usage of /:    18% of 15G        

Last login: Sat May 21 18:30:31 2016 from 192.168.1.17
[root@opi 19:11:03 ~]# </pre>
<p>ふむふむ。</p>
<p>気になる部分だけピックアップ。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">[root@opi 19:09:13 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq
1296000
[root@opi 19:09:13 ~]# cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
480000
[root@opi 19:09:24 ~]# cat /sys/class/thermal/thermal_zone0/temp
41
[root@opi 19:09:34 ~]# lscpu
Architecture:          armv7l
Byte Order:            Little Endian
CPU(s):                4
On-line CPU(s) list:   0-3
Thread(s) per core:    1
Core(s) per socket:    4
Socket(s):             1
CPU max MHz:           1296.0000
CPU min MHz:           480.0000
[root@opi 19:09:37 ~]# uname -a
Linux orangepipc 3.4.112-sun8i #30 SMP PREEMPT Sat Apr 30 19:49:10 CEST 2016 armv7l GNU/Linux
[root@opi 19:09:44 ~]# df -hT
Filesystem     Type      Size  Used Avail Use% Mounted on
/dev/mmcblk0p1 ext4       15G  2.6G   12G  18% /
udev           devtmpfs   10M     0   10M   0% /dev
tmpfs          tmpfs     201M  4.7M  196M   3% /run
tmpfs          tmpfs     501M     0  501M   0% /dev/shm
tmpfs          tmpfs     5.0M  4.0K  5.0M   1% /run/lock
tmpfs          tmpfs     501M     0  501M   0% /sys/fs/cgroup
tmpfs          tmpfs     501M   56K  500M   1% /tmp
tmpfs          tmpfs     101M  4.0K  101M   1% /run/user/1000
tmpfs          tmpfs     101M     0  101M   0% /run/user/0
[root@opi 19:09:51 ~]# ldmod
-bash: ldmod: command not found
[root@opi 19:10:06 ~]# lsmod
Module                  Size  Used by
iptable_filter          1277  0 
ip_tables              10568  1 iptable_filter
x_tables               13483  2 ip_tables,iptable_filter
cdc_acm                15348  0 
mali_drm                2728  1 
drm                   178585  2 mali_drm
mali                  123476  0 
ump                    29339  3 mali
8189es                999286  0 
hid_logitech_dj        10048  0 
[root@opi 19:10:09 ~]# </pre>
<p>ビデオドライバーは、このカーネルじゃないと読めないやつのようです。H263 のハードウェアデコーダは、<a href="http://linux-sunxi.org/Cedrus" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Cedrus<span class="wpel-icon wpel-image wpel-icon-1"></span></a> というプロジェクトのもののようです。</p>
<p>CPU 速度は ONE の クロックに合わせて、少し控え目に設定されているようです。</p>
<p>VNC で接続、様子を見てみました。</p>
<p><img loading="lazy" title="junkhack_s_X_desktop__orangepipc_1_" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="junkhack_s_X_desktop__orangepipc_1_" src="/wp-content/uploads/2016/05/junkhack_s_x_desktop__orangepipc_1_.png" width="606" height="480" /> </p>
<p>ベンチマークは以下な感じ。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">========================================================================
   BYTE UNIX Benchmarks (Version 5.1.3)

   System: orangepipc: GNU/Linux
   OS: GNU/Linux -- 3.4.112-sun8i -- #30 SMP PREEMPT Sat Apr 30 19:49:10 CEST 2016
   Machine: armv7l (unknown)
   Language: en_US.utf8 (charmap=&quot;UTF-8&quot;, collate=&quot;UTF-8&quot;)
   13:05:05 up 52 min,  3 users,  load average: 2.53, 2.22, 1.83; runlevel 5

------------------------------------------------------------------------
Benchmark Run: Sat May 21 2016 13:05:05 - 13:34:48
0 CPUs in system; running 4 parallel copies of tests

Dhrystone 2 using register variables       12095149.8 lps   (10.0 s, 7 samples)
Double-Precision Whetstone                     2406.2 MWIPS (10.0 s, 7 samples)
Execl Throughput                               1170.5 lps   (29.8 s, 2 samples)
File Copy 1024 bufsize 2000 maxblocks        152581.2 KBps  (30.0 s, 2 samples)
File Copy 256 bufsize 500 maxblocks           43873.6 KBps  (30.0 s, 2 samples)
File Copy 4096 bufsize 8000 maxblocks        386461.5 KBps  (30.0 s, 2 samples)
Pipe Throughput                              811390.4 lps   (10.0 s, 7 samples)
Pipe-based Context Switching                  92520.6 lps   (10.0 s, 7 samples)
Process Creation                               2138.7 lps   (30.0 s, 2 samples)
Shell Scripts (1 concurrent)                   2235.9 lpm   (60.1 s, 2 samples)
Shell Scripts (8 concurrent)                    299.4 lpm   (60.6 s, 2 samples)
System Call Overhead                        1883677.8 lps   (10.0 s, 7 samples)

System Benchmarks Index Values               BASELINE       RESULT    INDEX
Dhrystone 2 using register variables         116700.0   12095149.8   1036.4
Double-Precision Whetstone                       55.0       2406.2    437.5
Execl Throughput                                 43.0       1170.5    272.2
File Copy 1024 bufsize 2000 maxblocks          3960.0     152581.2    385.3
File Copy 256 bufsize 500 maxblocks            1655.0      43873.6    265.1
File Copy 4096 bufsize 8000 maxblocks          5800.0     386461.5    666.3
Pipe Throughput                               12440.0     811390.4    652.2
Pipe-based Context Switching                   4000.0      92520.6    231.3
Process Creation                                126.0       2138.7    169.7
Shell Scripts (1 concurrent)                     42.4       2235.9    527.3
Shell Scripts (8 concurrent)                      6.0        299.4    499.1
System Call Overhead                          15000.0    1883677.8   1255.8
                                                                   ========
System Benchmarks Index Score                                         451.1

[root@opi 13:34:48 UnixBench]# </pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
