<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:media="http://search.yahoo.com/mrss/"
	>

<channel>
	<title>I2C &#8211; JunkHack Feed</title>
	<link>/</link>
	<description>アリエクでポチった JUNKHACK</description>
	<lastBuildDate>Fri, 19 Feb 2021 22:04:16 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>
	<item>
		<title>ロジックアナライザでI2C 信号を見ると</title>
		<link>/2016/02/01/e383ade382b8e38383e382afe382a2e3838ae383a9e382a4e382b6e381a7i2c-e4bfa1e58fb7e38292e8a68be3828be381a8/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 31 Jan 2016 15:11:08 +0000</pubDate>
				<category><![CDATA[arduino]]></category>
		<category><![CDATA[I2C]]></category>
		<category><![CDATA[PCB]]></category>
		<category><![CDATA[ロジックアナライザ]]></category>
		<guid isPermaLink="false">/?p=2081</guid>
							<description><![CDATA[INA226 と arduino の I2C 信号をロジックアナライザで見てみました。 コードは前回と同じものです。1秒ごとに４つのデータをゲットしています。 トリガは、SDA にかけました。Hi から Low になって [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>INA226 と arduino の I2C 信号をロジックアナライザで見てみました。</p>
<p>コードは前回と同じものです。1秒ごとに４つのデータをゲットしています。</p>
<p> <a href="/wp-content/uploads/2016/02/7713a84eb638.png" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="１" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="１" src="/wp-content/uploads/2016/02/thumb.png" width="626" height="638" /></a>   </p>
<p>トリガは、SDA にかけました。Hi から Low になって信号が行くようです。</p>
<p>まず、I2C アドレス0x40 のレジスタ 0x02 を投げて、値が帰ってくる流れが見えます。読み出しには、1.7ms ほどかかっていることがわかりました。ビットの信号は、4us 程度のようです。SDAでビットが立っているのを判別しているようです。</p>
<p>&#160;</p>
<p>たとえば、最初は INA226_REG_BUSVOLTAGE&#160; (0x02) を読み出しているようで、値は16進数で 0x0E9E が帰ってきています。10進数では、3742 でこれに1.25 を掛けたものが mV になるので、4677.5 mV = 4.6775V ということですね。精度は、0.1mV ということです。</p>
<p>&#160;</p>
<p>I2C のリアルタイムな生データを見るのは今回が初めてです。なかなか、IC同士で通話している感じがおもしろいですね。</p>
<p>1000分の1,2秒で、データを読み取っていて、0 と 1 の Hi と Low の信号のやり取りでそれをやっているというのが目で見えてわかりやすいです。ロジックアナライザって偉い存在ですね。</p>
<p>&#160;</p>
<p>▼まとめ</p>
<p>・INA226 と arduino の I2C 信号を見てみた</p>
<p>・SDA の LOW にトリガーをかけて採取。</p>
<p>・スレーブアドレス+データ領域を指定すると、対応するスレーブから値が帰ってくる</p>
<p>・SCL にビットデータが流れ、SDA にデータ流れる感じ。両方ともHi になった部分が ビットが立つ感じ。</p>
<p>・ビット のHi になる時間は、4us ほど。</p>
<p>・１つのレジスタの読み出しには、1.7ms ほどかかる。</p>
<p>・呼び出しから応答までの間隔は、1ms ほど。0.7ms でデータをやり取りしている。合計で1.7ms</p>
<p>・安物のロジックアナライザでも十分現象を観察できた。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>INA226 を arduino nano で</title>
		<link>/2016/01/30/ina226-e38292-arduino-nano-e381a7/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sat, 30 Jan 2016 14:27:20 +0000</pubDate>
				<category><![CDATA[arduino]]></category>
		<category><![CDATA[C]]></category>
		<category><![CDATA[I2C]]></category>
		<category><![CDATA[PCB]]></category>
		<guid isPermaLink="false">/?p=2074</guid>
							<description><![CDATA[もう1月も終わりですね。なんだか速く月日が経つような気がします。 さて、今日は 先日作った INA226 の電流電圧センサーを I2C で arduino nano クローンにて計測してみました。 前回の調査で見つけた、 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>もう1月も終わりですね。なんだか速く月日が経つような気がします。</p>
<p>さて、今日は 先日作った INA226 の電流電圧センサーを I2C で arduino nano クローンにて計測してみました。</p>
<p>前回の調査で見つけた、ポーランドのサイトにいいチュートリアルがありました。</p>
<blockquote>
<p>Korneliusz Jarzębskiのサイト     <br /><a href="http://www.jarzebski.pl/arduino/czujniki-i-sensory/cyfrowy-czujnik-pradu-mocy-ina226.html" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">Dwukierunkowy cyfrowy czujnik prądu/mocy INA226<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>github     <br />Arduino-INA226      <br /><a title="https://github.com/jarzebski/Arduino-INA226" href="https://github.com/jarzebski/Arduino-INA226" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">https://github.com/jarzebski/Arduino-INA226<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
</blockquote>
<p>このGitHub のsimple のソースにライブラリを配置し、</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">./INA226_simple
├── INA226.cpp
├── INA226.h
└── INA226_simple.ino</pre>
<p>INA226.cpp の記述を以下に変更。25mR のシャント抵抗の設定をします。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">#include &quot;INA226.h&quot;
::
void setup() 
{
::
  // Calibrate INA226. Rshunt = 0.025 ohm, Max excepted current = 4A
  ina.calibrate(0.025, 1);
::</pre>
<p>配線は以下のようにしました。ちょっとわかりにくいですが、Arduino の A5(SCL) と A4(SDA) をつないで、GND と 3.3V を VSS に入れます。あとは、負荷を電流計測にハイサイド側に付ける感じです。</p>
<p><a href="/wp-content/uploads/2016/01/arduino_ina226.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="arduino_ina226" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="arduino_ina226" src="/wp-content/uploads/2016/01/arduino_ina226_thumb.jpg" width="640" height="480" /></a> </p>
<p>シリアル通信を開くと、以下のようになっています。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">Initialize INA226
-----------------------------------------------
Mode:                  Shunt and Bus, Continuous
Samples average:       1 sample
Bus conversion time:   1.100ms
Shunt conversion time: 1.100ms
Max possible current:  3.28 A
Max current:           3.28 A
Max shunt voltage:     0.08 V
Max power:             117.96 W
-----------------------------------------------
Bus voltage:   4.67875 V
Bus power:     0.01250 W
Shunt voltage: 0.00007 V
Shunt current: 0.00300 A

Bus voltage:   4.68125 V
Bus power:     0.01250 W
Shunt voltage: 0.00007 V
Shunt current: 0.00300 A

Bus voltage:   4.67750 V
Bus power:     0.01250 W
Shunt voltage: 0.00007 V
Shunt current: 0.00300 A</pre>
<p>PC からのUSB 電圧は4.67V 程度のようです。3mA で12.5mW ということがわかりました。ちゃんと計測できているようですね。</p>
<p>arduino だと装備からLCDなどに出す用途で使えそうですね。データをどこかに飛ばすものであれば、ESP8266 が良さそうです。</p>
<p>&#160;</p>
<p>IC 回路の電圧は3.3V でも5V でもOKです。LEDの負荷を arduino の 3.3V から取って計測してみると以下のようになりました。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">Initialize INA226
-----------------------------------------------
Mode:                  Shunt and Bus, Continuous
Samples average:       1 sample
Bus conversion time:   1.100ms
Shunt conversion time: 1.100ms
Max possible current:  3.28 A
Max current:           3.28 A
Max shunt voltage:     0.08 V
Max power:             117.96 W
-----------------------------------------------
Bus voltage:   3.26875 V
Bus power:     0.00500 W
Shunt voltage: 0.00004 V
Shunt current: 0.00150 A

Bus voltage:   3.27000 V
Bus power:     0.00500 W
Shunt voltage: 0.00004 V
Shunt current: 0.00150 A

Bus voltage:   3.26875 V
Bus power:     0.00500 W
Shunt voltage: 0.00004 V
Shunt current: 0.00160 A</pre>
<p>&#160;</p>
<p>ちょっとコードを追加して、レジスターの値を取ってみました。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">Initialize INA226
-----------------------------------------------
Mode:                  Shunt and Bus, Continuous
Samples average:       1 sample
Bus conversion time:   1.100ms
Shunt conversion time: 1.100ms
Max possible current:  3.28 A
Max current:           3.28 A
Max shunt voltage:     0.08 V
Max power:             117.96 W
-----------------------------------------------
INA226_REG_CONFIG          (0x00):16679 ---
INA226_REG_SHUNTVOLTAGE    (0x01):30 ---
INA226_REG_BUSVOLTAGE      (0x02):3749 ---
INA226_REG_POWER           (0x03):5 ---
INA226_REG_CURRENT         (0x04):30 ---
INA226_REG_CALIBRATION     (0x05):2048 ---
-----------------------------------------------
Bus voltage:   4.68250 V
Bus power:     0.01250 W
Shunt voltage: 0.00007 V
Shunt current: 0.00300 A</pre>
<p>レジスター値は10進です。アベレージの回数とかも定数があるので便利ですね。<br />
  <br />精度は、0.1mA&#160; のようですね。PCB のあまり部分で作ったモジュールでも結構遊べました。あと、小さなパーツの半田付けの練習にもなりました。</p>
<p>&#160;</p>
<p>▼参考サイト</p>
<p><a title="http://denshi-kousaku.fan.coocan.jp/report030.html" href="http://denshi-kousaku.fan.coocan.jp/report030.html" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">http://denshi-kousaku.fan.coocan.jp/report030.html<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>&#160;</p>
<p>▼まとめ</p>
<p>・ライブラリ便利！</p>
<p>・INA226 モジュールを使って、arduino で i2c にて電流電圧を簡単に取れる</p>
<p>・精度は、シャント抵抗次第で、0.025R だと0.1mA（100μA） の精度になるようです</p>
<p>・GND はIC回路と共通で測定で、電圧を測定する場合は、IC の VBUS ８pin に計測電圧をかける</p>
<p>・LSB とは一般的には、最下位ビットのことで、least significant bit の頭文字。</p>
<p>・これの分解能力は16ビットなので、0.025R だと電流は0.1mA で電圧は 1.25mV</p>
<p>・とりあえず、十分な精度です。</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>INA226 を RasPi の ruby でi2c</title>
		<link>/2016/01/25/ina226-e38292-raspi-e381ae-ruby-e381a7i2c/</link>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sun, 24 Jan 2016 17:24:33 +0000</pubDate>
				<category><![CDATA[Aliexpress]]></category>
		<category><![CDATA[I2C]]></category>
		<category><![CDATA[Parts]]></category>
		<category><![CDATA[PCB]]></category>
		<category><![CDATA[Raspberry Pi]]></category>
		<guid isPermaLink="false">/?p=2049</guid>
							<description><![CDATA[PCB が組みあがったのですが、これを RasPi で i2c するサンプルをググってみたら、いくつかありました。 RasPi は、i2c が使えるようにモジュールをロードしておきました。RasPi でi2c は初めて使 [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>PCB が組みあがったのですが、これを RasPi で i2c するサンプルをググってみたら、いくつかありました。</p>
<p>RasPi は、i2c が使えるようにモジュールをロードしておきました。RasPi でi2c は初めて使います。無事に出来るでしょうか？</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># lsmod
Module                  Size  Used by
★i2c_dev                 6027  0 
cfg80211              386508  0 
rfkill                 16651  1 cfg80211
rpcsec_gss_krb5        20958  0 
nfsd                  263569  2 
snd_bcm2835            18649  0 
snd_pcm                73475  1 snd_bcm2835
snd_seq                53078  0 
snd_seq_device          5628  1 snd_seq
snd_timer              17784  2 snd_pcm,snd_seq
snd                    51038  5 snd_bcm2835,snd_timer,snd_pcm,snd_seq,snd_seq_device
★i2c_bcm2708             4990  0 
joydev                  8879  0 
spi_bcm2708             5137  0 
evdev                   9950  2 
uio_pdrv_genirq         2958  0 
uio                     8119  1 uio_pdrv_genirq</pre>
<p>&#160;</p>
<p>先輩たちがサンプルコードは書いているはずなので、探したところ、python でやるのとか、ruby でやるのとかがすぐ見つかりました。</p>
<p>とりあえず、動作確認したいので以下のサイトのコードを参考に必要な部分だけ使わせてもらいました。</p>
<blockquote>
<p>Rabbit Note<br />
    <br /><a href="http://rabbit-note.com/2014/08/24/beaglebone-black-power-meter-soft/" target="_blank" rel="noopener noreferrer external" data-wpel-link="external" class="wpel-icon-right">BeagleBone Black で作るロギング機能付き電力計 (ソフト編)<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
</blockquote>
<p>BeagleBone Black(BBBと略するようです)での環境ですが、大変参考になりました。</p>
<p>使わせていただいたコードは最下部に付けておきます。で、配線は写真のようにちょっと雑ですが配線。負荷には、ちっさいファンをつけてみました。</p>
<p><a href="/wp-content/uploads/2016/01/singleshot0023.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0023" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0023" src="/wp-content/uploads/2016/01/singleshot0023_thumb.jpg" width="640" height="419" /></a> スレーブアドレスは、何も設定しないと、0x40 が設定されるようです。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># i2cdetect -y 1
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: 40 -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --  </pre>
<p>&#160;</p>
<p>プログラムを起動すると、以下のようになります。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># ./test.ruby
--------- 2016/01/25, 01:33:22
4.78125 V
151 mA
0.29 W
--------- 2016/01/25, 01:33:22
4.78125 V
151 mA
0.289 W
--------- 2016/01/25, 01:33:23
4.78875 V
152 mA
0.291 W
--------- 2016/01/25, 01:33:23
4.7875 V
151 mA
0.29 W
--------- 2016/01/25, 01:33:24
4.7875 V
150 mA
0.289 W
--------- 2016/01/25, 01:33:24
4.7875 V
151 mA
0.29 W
--------- 2016/01/25, 01:33:25
4.79 V
152 mA
0.292 W</pre>
<p>負荷にLED を点けてみると、以下のようです。</p>
<pre class="brush: cpp; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;"># ./test.ruby 
--------- 2016/01/25, 01:35:31
4.88 V
2 mA
0.005 W
--------- 2016/01/25, 01:35:31
4.88 V
2 mA
0.005 W
--------- 2016/01/25, 01:35:31
4.9125 V
2 mA
0.005 W
--------- 2016/01/25, 01:35:32
4.91375 V
2 mA
0.005 W
--------- 2016/01/25, 01:35:32
4.91375 V
2 mA
0.005 W</pre>
<p>&#160;</p>
<p>まだあまりちゃんと理解していませんが、内部のレジスタの ox05 に、キャリブレーションする設定値を入れるようです。</p>
<p>以下の C のサンプルコードから、シャント抵抗に0.025R を使っている場合は、以下のように計算した16進数を入れればよいようです。書き込むとき、以下のコードでは、リトルエンディアンに変換していました。</p>
<p><a title="https://github.com/jarzebski/Arduino-INA226/blob/master/INA226.cpp" href="https://github.com/jarzebski/Arduino-INA226/blob/master/INA226.cpp" data-wpel-link="external" target="_blank" rel="external noopener noreferrer" class="wpel-icon-right">https://github.com/jarzebski/Arduino-INA226/blob/master/INA226.cpp<span class="wpel-icon wpel-image wpel-icon-1"></span></a></p>
<p>0.025Ω = 0.00512/(0.025*0.0001)=2048 = 0x08 0x00</p>
<p>&#160;</p>
<p>0x05 の補正レジスタを見てみると、</p>
<p># i2cget -y 1 0x40 0x05 w<br />
  <br />0x0008</p>
<p>という値が帰ってきました。</p>
<p>&#160;</p>
<p>さて、そんな感じでとりあえずコードは以下のようにしてみました。</p>
<pre class="brush: ruby; gutter: false; toolbar: false; collapse: true; auto-links: false; smart-tabs: false;">#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
 
IOCTL_I2C_SLAVE = 0x0703
 
# Script for power meter using the following parts
# - Power Meter module (IC: INA226)

# # i2cdetect -y 1
#      0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
# 00:          -- -- -- -- -- -- -- -- -- -- -- -- --
# 10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 40: 40 -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
# 70: -- -- -- -- -- -- -- --

class PowerSenseor
  def initialize(i2c_bus=1, dev_addr=0x40)
    @i2c = File.open(sprintf('/dev/i2c-%d', i2c_bus), 'rb+')
    @i2c.ioctl(IOCTL_I2C_SLAVE, dev_addr)

    @dev_addr = dev_addr
    @v_val = 0
    @c_val = 0
    @p_val = 0

    # shunt resistor = 0.002Ω = 0.00512/(0.002*0.001)=2560 = 0x0a 0x00
    #                  0.025Ω = 0.00512/(0.025*0.0001)=2048 = 0x08 0x00
    #   内部レジスタ[0x04] (Current) = 内部レジスタ[0x01]×内部レジスタ[0x05] ／ 2048
    exec_cmd(&quot;i2cset -y 1 0x#{dev_addr.to_s(16)} 0x05 0x08 0x00 i&quot;)
    # conversion time = 332us, number of average = 16
    exec_cmd(&quot;i2cset -y 1 0x#{dev_addr.to_s(16)} 0x00 0x04 0x97 i&quot;)
  end

  def sense
    # i2cset/i2cget は 10ms オーダーの時間を消費するのでここでは使用しない 
    @i2c.write(0x02)
    @v_val = conver_signed(@i2c.read(2))

    # 0x04 電流レジスタ
    @i2c.write(0x04)
    @c_val = conver_signed(@i2c.read(2))

    # 0x03 Powerレジスタ
    @i2c.write(0x03)
    @p_val = conver_signed(@i2c.read(2))
  end

  def conver_signed(bytes)
    # convert endian
    return bytes.unpack('n').pack('S').unpack('s')[0].abs
  end

  def get_voltage
    return calc_voltage(@v_val)
  end

  def get_current
    return calc_current(@c_val)
  end

  def get_power
    return calc_power(@p_val)
  end

  def exec_cmd(cmd)
    val=`#{cmd} 2&gt; /dev/null`
    raise StandardError, &quot;FAIL: #{cmd}&quot; unless $?.success?
    return val
  end

  def calc_voltage(v_val)
    return v_val * 1.25 / 1000.0
  end

  # 0x04 電流レジスタ
  def calc_current(c_val)
    return c_val / 10
  end

  # 0x03 Powerレジスタ
  def calc_power(p_val)
    # return p_val * 0.025
    return p_val * 0.001
  end
end

require 'optparse'
params = ARGV.getopts('lq')

data_list = []

Signal.trap(:INT){
  if params['l'] then
    printf(&quot;time,voltage,current,power\n&quot;)
    data_list.each{|data|
      printf(&quot;%10d,%.3f,%.3f,%.3f\n&quot;, data[0], data[1], data[2], data[3])
    }
  end
  exit(0)
}

sensor = PowerSenseor.new
require &quot;date&quot;

start_time = Time.now
i = 0
while true
  sensor.sense
  v = sensor.get_voltage
  c = sensor.get_current
  p = sensor.get_power

  dt = DateTime.now
  print &quot;--------- &quot;
  print(dt.strftime(&quot;%Y/%m/%d, %H:%M:%S&quot;), &quot;\n&quot;)

  print v
  print &quot; V\n&quot;
  print c
  print &quot; mA\n&quot;
  print p
  print &quot; W\n&quot;

  if ((i &amp; 0x7F) == 0) then

  else
    sleep 0.5
  end
  i = (i &amp; 0xff) + 1
end</pre>
<p>&#160;</p>
<p>▼まとめ</p>
<p>・0x05 にシャント抵抗値を入れた補正値を書き込む</p>
<p>・書き込む最は、16進をリトルエンディアンにして書き込む</p>
<p>・0x04 はPowerレジスタで、0x04 は電流レジスタ。</p>
<p>・LSB ってなに？</p>
<p>・ちっこい今使っているファンは、150mA くらい使っていて0.3W ほど</p>
<p>・c のサンプルはすぐに見つからなかったけども、どうんな感じになるんだろう？</p>
<p>・自分で作ったハードが動いてうれしぃ！</p>
<p>・レジスタって、どういう回路なの？ どういう仕組みで覚えているんだろう？</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>INA226 電流センサーの I2C ボードを作った</title>
		<link>/2016/01/24/ina226-e99bbbe6b581e382bbe383b3e382b5e383bce381ae-i2c-e3839ce383bce38389e38292e4bd9ce381a3e3819f/</link>
					<comments>/2016/01/24/ina226-e99bbbe6b581e382bbe383b3e382b5e383bce381ae-i2c-e3839ce383bce38389e38292e4bd9ce381a3e3819f/#comments</comments>
		
		<dc:creator><![CDATA[JunkHack]]></dc:creator>
		<pubDate>Sat, 23 Jan 2016 17:00:05 +0000</pubDate>
				<category><![CDATA[Aliexpress]]></category>
		<category><![CDATA[I2C]]></category>
		<category><![CDATA[PCB]]></category>
		<guid isPermaLink="false">/?p=2045</guid>
							<description><![CDATA[小さな部品も大きく見えるようになって、作業しやすくなったのでPCB の半田付けを再開しました。 今回は、電流センサーの INA226 です。 回路図は、チュートリアルを参考に上記のようにしました。 ブレッドボードをまたぐ [&#8230;]]]></description>
										<content:encoded><![CDATA[<p> 小さな部品も大きく見えるようになって、作業しやすくなったのでPCB の半田付けを再開しました。</p>
<p>今回は、電流センサーの INA226 です。</p>
<p><a href="/wp-content/uploads/2016/01/b.png" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="b" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="b" src="/wp-content/uploads/2016/01/b_thumb.png" width="640" height="256" /></a></p>
<p>回路図は、チュートリアルを参考に上記のようにしました。</p>
<p><img title="a" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="a" src="/wp-content/uploads/2016/01/a_thumb.png" width="640" height="205" /> </p>
<p>ブレッドボードをまたぐ4ピッチ幅にしてあります。プリントに出すPCB のあまり部分に無理やり作ったので少し窮屈です。</p>
<p><img title="3" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="3" src="/wp-content/uploads/2016/01/31.jpg" width="640" height="480" /> </p>
<p>こんな感じでテープで固定しつつ半田付け。小さいですが、モニターで見れるので問題なしです。</p>
<p><img title="2" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="2" src="/wp-content/uploads/2016/01/21.jpg" width="640" height="480" /> </p>
<p>以下、作業ステップ。</p>
</p>
</p>
</p>
<p><a href="/wp-content/uploads/2016/01/singleshot0007.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0007" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0007" src="/wp-content/uploads/2016/01/singleshot0007_thumb.jpg" width="640" height="480" /></a></p>
<p>フラックスをつけます。 <a href="/wp-content/uploads/2016/01/singleshot0008.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0008" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0008" src="/wp-content/uploads/2016/01/singleshot0008_thumb.jpg" width="640" height="480" /></a></p>
<p>半田小手の先にちょっと半田を付けて位置決め。ブリッジしても気にしない。 <a href="/wp-content/uploads/2016/01/singleshot0011.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0011" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0011" src="/wp-content/uploads/2016/01/singleshot0011_thumb.jpg" width="640" height="480" /></a></p>
<p>ブリッジを小手を当てて取ります。 <a href="/wp-content/uploads/2016/01/singleshot0012.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0012" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0012" src="/wp-content/uploads/2016/01/singleshot0012_thumb.jpg" width="640" height="480" /></a></p>
<p>こんな感じで、ブリッジを除去。 <a href="/wp-content/uploads/2016/01/singleshot0013.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0013" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0013" src="/wp-content/uploads/2016/01/singleshot0013_thumb.jpg" width="640" height="480" /></a></p>
<p>フラックスを麺棒で掃除。 <a href="/wp-content/uploads/2016/01/singleshot0014.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0014" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0014" src="/wp-content/uploads/2016/01/singleshot0014_thumb.jpg" width="640" height="480" /></a></p>
<p>反対側もつけて、チェック。 <a href="/wp-content/uploads/2016/01/singleshot0015.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0015" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0015" src="/wp-content/uploads/2016/01/singleshot0015_thumb.jpg" width="640" height="480" /></a></p>
<p>シャント抵抗もつけて、ピンヘッダーを付けてとりあえず本日終了。 <a href="/wp-content/uploads/2016/01/singleshot0021.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0021" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0021" src="/wp-content/uploads/2016/01/singleshot0021_thumb.jpg" width="640" height="480" /></a> 裏側も小さな抵抗とコンデンサーを付けています。</p>
<p>&#160;</p>
<p>かなりマイクロスコープがあるおかげで作業がしやすくなりました。必須ですね。これは。</p>
<p>300円のmicroSD の 8GB も来たのでラズパイで I2C してみます。品質はどうでしょうかね？</p>
<p>こんなに、ぼやけた印字でしたっけ？なんか偽造品の臭いがしますが、、、、</p>
<p><a href="/wp-content/uploads/2016/01/singleshot0022.jpg" target="_blank" rel="noopener noreferrer" data-wpel-link="internal"><img title="SingleShot0022" style="border-top:0;border-right:0;border-bottom:0;float:none;margin-left:auto;border-left:0;display:block;margin-right:auto;" border="0" alt="SingleShot0022" src="/wp-content/uploads/2016/01/singleshot0022_thumb.jpg" width="640" height="480" /></a></p>
</p>
<p>あとで、手持ちの本物と比べてみますか。</p>
]]></content:encoded>
					
					<wfw:commentRss>/2016/01/24/ina226-e99bbbe6b581e382bbe383b3e382b5e383bce381ae-i2c-e3839ce383bce38389e38292e4bd9ce381a3e3819f/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
	</channel>
</rss>
